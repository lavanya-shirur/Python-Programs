# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        
        pos=0
        if (head== None):
            return False
        if(head.next==None):
            return False
        
        cur=head
        while(cur.next!=None):
            cur=cur.next
            if(cur.next==None):
                return False
            else:
                return True
            
        
        list1=[]
        cur=head
        while(cur.next!=None):
            list1.append(cur.val)
            cur=cur.next
            if(cur.val in list1):
                return True
            else:
                return False
        """
        slow=head
        fast=head
        if (head== None):
            return False
        
        if(head.next==None ):
            return False
        
        while(fast!=None and fast.next!=None):
            fast=fast.next.next
            slow=slow.next
            if(slow==fast):
                return True
        return False
        
