#https://leetcode.com/problems/valid-parentheses/
class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        valids = ['()', '[]', '{}']
        if len(s) % 2 != 0:
            return False
        
        while len(s) != 0:
            lenstk = len(s)
            for val in valids:
                s = s.replace(val, '')
            if len(s) == lenstk:
                return False
        return True
        
        
 ##############################
 class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        stack=[]
        mapping = {")": "(", "}": "{", "]": "["}
        if s=="":
            return True
        
        for char in s:
            #if cahr is not closing bracket , its a opening bracket,so append it to stack
            if char not in mapping:
                stack.append(char)
                
                
            #if char is a closing bracket then pop it and check if it equal to the element in the stack 
            else:
                if stack :
                    top_element=stack.pop()
                else :
                    top_element='#'

                if (mapping[char] != top_element):
                    return False
            
        if len(stack)==0:
            return True
       
